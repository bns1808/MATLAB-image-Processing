clc
clear
hold on;


option=1;

option2=1;

main_path = pwd;

cd(main_path)

time= [10 20 30];
distance = [2 3 4];


if option==1

%User Input - Add or remove the folder for experiments needed
Exp_dir{1}= strcat(main_path, '/Experiment_0holes_5deg_new/Experiment_1010_0elev');
Exp_dir{2}= strcat(main_path, '/Experiment_2holes_5deg_new/Experiment_1010_0elev');
Exp_dir{3}= strcat(main_path, '/Experiment_4holes_5deg/Experiment_1010_0elev');
Exp_dir{4}= strcat(main_path, '/Experiment_6holes_5deg_new/Experiment_1010_0elev');
Exp_dir{5}= strcat(main_path, '/Experiment_8holes_5deg/Experiment_1010_0elev');
Exp_dir{6}= strcat(main_path, '/Experiment_10holes_5deg/Experiment_1010_0elev');


x_f(1)=825;
x_f(2)=654;
x_f(3)=687;
x_f(4)=687;
x_f(5)=697;
x_f(6)=687;

elseif option==2
Exp_dir{1}= strcat(main_path, '/Experiment_2holes_-5deg_new/Experiment_1010_0elev');
Exp_dir{2}= strcat(main_path, '/Experiment_2holes_-2.5deg_new/Experiment_1010_0elev');
Exp_dir{3}= strcat(main_path, '/Experiment_2holes_0deg/Experiment_1010_0elev');
Exp_dir{4}= strcat(main_path, '/Experiment_2holes_5deg_new/Experiment_1010_0elev');

end


exp_dir_path{1} =strcat(Exp_dir{1},'/new_directory');
exp_dir_path{2} =strcat(Exp_dir{2},'/new_directory');
exp_dir_path{3} =strcat(Exp_dir{3},'/new_directory');
exp_dir_path{4} =strcat(Exp_dir{4},'/new_directory');
exp_dir_path{5} =strcat(Exp_dir{5},'/new_directory');
exp_dir_path{6} =strcat(Exp_dir{6},'/new_directory');

exp_dir2_path{1} =strcat(exp_dir_path{1},'/new_directory');
exp_dir2_path{2} =strcat(exp_dir_path{2},'/new_directory');
exp_dir2_path{3} =strcat(exp_dir_path{3},'/new_directory');
exp_dir2_path{4} =strcat(exp_dir_path{4},'/new_directory');
exp_dir2_path{5} =strcat(exp_dir_path{5},'/new_directory');
exp_dir2_path{6} =strcat(exp_dir_path{6},'/new_directory');


exp_dir3_path{1} =strcat(exp_dir2_path{1},'/new_directory');
exp_dir3_path{2} =strcat(exp_dir2_path{2},'/new_directory');
exp_dir3_path{3} =strcat(exp_dir2_path{3},'/new_directory');
exp_dir3_path{4} =strcat(exp_dir2_path{4},'/new_directory');
exp_dir3_path{5} =strcat(exp_dir2_path{5},'/new_directory');
exp_dir3_path{6} =strcat(exp_dir2_path{6},'/new_directory');

density = 1010; %or 1020


%Non_dimensionalize

xf= 0.15; %m
phi=0.38;
mu= 10^(-3);
D = 0.003;
density_not=998;

k=((D^2)*(phi^3))/(180*((1-phi)^2));
rho= mu/density_not;

gs=(9.81*(density(1)-density_not(1)))/density_not;
Qs= 10^(-6);
t= 0.0762;
qs=Qs/t;

T=((((xf)^3)*phi*rho)/(k*gs*qs))^0.5;

n=0;
if option2==1
something=time;
elseif option2==2
something=distance;
end

% Row titles
experimentNames = {'0', '2', '4', '6', '8', '10'};

% Column titles (time stamps)
timeStamps = {num2str(round((time(1)*30)/(T*10),2,"decimals")), num2str(round((time(2)*30)/(T))), num2str(round((time(3)*30)/(T)))};

%%time
for exp=1:length(Exp_dir)
    cd(exp_dir3_path{exp})
    load("highestpoints.mat")
for image=1:length(something)

% Suppose this is your grayscale image data matrix
ex_number=something(image);




% Set thresholds for different intensity levels
low_threshold = 0.1;
mid_threshold = 0.2;
high_threshold = 0.5;
n=n+1;
% subplot(length(Exp_dir),(length(something)),n); % 2 rows, 4 columns, 1st plot

hSub = subplot(length(Exp_dir),(length(something)),n);
I=fakeimages{ex_number};
% I = flipud(I);
I2 = I;
% 
% Assign each pixel an intensity level based on these thresholds
I(I2<=low_threshold) = 1; % Black
I(I2>low_threshold & I<=mid_threshold) = 2; % Blue
I(I2>mid_threshold & I<=high_threshold) = 3; % Yellow
I(I2>high_threshold) = 4; % Red

% Create a new colormap for these intensity levels
cmap = [0 0 0; 0 0 1; 1 1 0; 1 0 0]; % RGB values for black, blue, yellow, red
colormap(cmap);

% Display the image
imagesc(I);


    % Add column titles for the topmost plots
    if n <= 3
        title(timeStamps{n});
    end

        % Add row titles for the leftmost plots
    if mod(n,3) == 1
        ylabel(experimentNames{ceil(n/3)});
    end


% Specify conversion factor from pixels to mm
mm_per_pixel = 1/x_f(exp);

% Generate the corresponding new X-axis scale (in mm)
new_X_scale = 0.5:0.5:5;

% Generate the corresponding new X-axis scale (in mm)
new_Y_scale = fliplr(0:0.5:1);


% Apply new scale
set(gca, 'XTick', round(0.5*x_f-(1/3)*x_f):round(0.5*x_f):round(5*x_f-(1/3)*x_f));
set(gca, 'XTickLabel', new_X_scale);

% Apply new scale
set(gca, 'YTick', 0:round(0.5*x_f):round(x_f));
set(gca, 'YTickLabel', new_Y_scale);

% Add labels and title
xlabel('$X^{*}$', 'Interpreter', 'latex');
ylabel('$Z^{*}$', 'Interpreter', 'latex');

% Crop the window to desired size
xlim([0 round(4.4*x_f(exp))]);

ylim([0 round(x_f(exp))])

pbaspect([5 1 1]);  % Make the width 5 times the height

    % Add column titles for the topmost plots
    if n <= 3
        title(timeStamps{n});
    end

    if mod(n,3) == 1
        axPos = get(hSub, 'position'); 
        text('Units', 'normalized', 'Position', [-0.2, 0.5], ...
             'String', experimentNames{ceil(n/3)}, ...
             'Rotation', 0, ...
             'HorizontalAlignment', 'center', ...
             'VerticalAlignment', 'middle', ...
             'Parent', hSub);
    end


end
end

% Adding a Y label for the entire figure using text
annotation('textbox', [0.02, 0.5, 0, 0], 'String', 'Overall Y Label', ...
           'Rotation', 90, 'HorizontalAlignment', 'center', ...
           'VerticalAlignment', 'middle', 'EdgeColor', 'none');

% Adjusting the figure and spacing for clarity
set(gcf, 'Position', [100, 100, 600, 1200]);
